# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nBnGQ6nHSwa5yf_nV8QH2fGprqOSLYaW
"""

!pip install textblob tensorflow scikit-learn pandas numpy matplotlib -q

import pandas as pd
import numpy as np
from textblob import TextBlob
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()


import pandas as pd


df = pd.read_csv("TWTR.csv")  # If your file is named TWTR.csv
# If your CSV uses semicolons instead of commas, use:
# df = pd.read_csv("TWTR.csv", sep=";")

print("âœ… Dataset Loaded | Shape:", df.shape)
print(df.head())

!pip install textblob tensorflow scikit-learn pandas numpy matplotlib -q

import pandas as pd
import numpy as np
from textblob import TextBlob
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.pyplot as plt

df = pd.read_csv("TWTR.csv")

print("âœ… Dataset Loaded | Shape:", df.shape)
print(df.head())

df.columns = [c.strip() for c in df.columns]

df = df[['Date', 'Close']].dropna()

# Convert Date to datetime
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df = df.dropna(subset=['Date'])

# Sort by date
df = df.sort_values('Date').reset_index(drop=True)

print("\nðŸ§¾ Cleaned data preview:")
print(df.head())

np.random.seed(42)
sentences = [
    "Strong earnings boost investor confidence.",
    "Market faces uncertainty after weak report.",
    "Company fundamentals are improving.",
    "Negative sentiment due to market crash.",
    "Investors show optimism about recovery.",
]
df['Tweet'] = np.random.choice(sentences, len(df))
df['Sentiment'] = df['Tweet'].apply(lambda x: TextBlob(x).sentiment.polarity)

print("\nâœ… Sentiment generated successfully!")
print(df[['Date','Close','Sentiment']].head())

df = df[['Close', 'Sentiment']].dropna()
scaler = MinMaxScaler()
scaled = scaler.fit_transform(df)

def create_sequences(data, seq_len=10):
    X, y = [], []
    for i in range(len(data)-seq_len):
        X.append(data[i:i+seq_len])
        y.append(data[i+seq_len, 0])  # predict Close
    return np.array(X), np.array(y)

X, y = create_sequences(scaled)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

print("\nðŸ“Š Data split | Train:", X_train.shape, "| Test:", X_test.shape)

model = Sequential([
    LSTM(64, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])),
    Dropout(0.2),
    LSTM(64),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse')
history = model.fit(X_train, y_train, epochs=5, batch_size=32, verbose=1)

pred = model.predict(X_test)
loss = model.evaluate(X_test, y_test, verbose=0)
print(f"\nâœ… Model Evaluation | MSE Loss: {loss:.4f}")

# Convert back to original scale
predicted_prices = scaler.inverse_transform(np.concatenate((pred, np.zeros((len(pred), 1))), axis=1))[:,0]
actual_prices = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((len(y_test),1))), axis=1))[:,0]

plt.figure(figsize=(10,5))
plt.plot(actual_prices, label='Actual')
plt.plot(predicted_prices, label='Predicted')
plt.title("TWTR Stock Price Prediction")
plt.legend()
plt.show()

pred_dir = np.where(np.diff(predicted_prices, prepend=predicted_prices[0]) > 0, 1, 0)
actual_dir = np.where(np.diff(actual_prices, prepend=actual_prices[0]) > 0, 1, 0)

acc = accuracy_score(actual_dir, pred_dir)
print(f"\nâœ… Directional Accuracy: {acc*100:.2f}%")
print("\nClassification Report:")
print(classification_report(actual_dir, pred_dir, target_names=['Down','Up']))
print("\nConfusion Matrix:")
print(confusion_matrix(actual_dir, pred_dir))

!pip install mplfinance -q
import mplfinance as mpf

# Merge sentiment with OHLC for plotting
df_plot = pd.read_csv("TWTR.csv")
df_plot['Date'] = pd.to_datetime(df_plot['Date'])
df_plot = df_plot.sort_values('Date')

# Add Sentiment (scaled for overlay)
df_plot['Sentiment_scaled'] = (df['Sentiment'] - df['Sentiment'].min()) / (df['Sentiment'].max() - df['Sentiment'].min())
df_plot.set_index('Date', inplace=True)

# Plot candlestick with sentiment as a line
apds = [mpf.make_addplot(df_plot['Sentiment_scaled'], color='blue', panel=1, ylabel='Sentiment')]
mpf.plot(df_plot, type='candle', style='yahoo', addplot=apds, volume=True, title='TWTR Candlestick + Sentiment')

plt.figure(figsize=(12,6))
plt.plot(actual_prices, label='Actual', color='green')
plt.plot(predicted_prices, label='Predicted', color='red')
plt.fill_between(range(len(predicted_prices)),
                 predicted_prices*0.95,
                 predicted_prices*1.05,
                 color='red', alpha=0.2, label='Â±5% Confidence')
plt.title('TWTR Stock Prediction with Confidence Band')
plt.xlabel('Days')
plt.ylabel('Price')
plt.legend()
plt.show()

import seaborn as sns
cm = confusion_matrix(actual_dir, pred_dir)
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Pred Down','Pred Up'], yticklabels=['Actual Down','Actual Up'])
plt.title('TWTR Directional Prediction Confusion Matrix')
plt.show()

df['Close'] = df['Close'].values  # Ensure correct type
rolling_window = 20
rolling_avg = df['Close'].rolling(rolling_window).mean()

plt.figure(figsize=(12,6))
plt.plot(df['Close'], label='Actual Close', alpha=0.7)
plt.plot(rolling_avg, label=f'{rolling_window}-day Rolling Avg', color='orange')
plt.plot(range(len(predicted_prices)), predicted_prices, label='LSTM Predicted', color='red')
plt.title('TWTR Stock: Rolling Average & Prediction')
plt.legend()
plt.show()

plt.figure(figsize=(10,6))
plt.scatter(df['Sentiment'], df['Close'], c=df['Sentiment'], cmap='coolwarm', alpha=0.6)
plt.colorbar(label='Sentiment Polarity')
plt.xlabel('Sentiment')
plt.ylabel('Close Price')
plt.title('TWTR Stock Price vs Sentiment')
plt.show()

